{% set MAIN_CHECKPOINTS_COUNT = 5 -%}
{% set ADDITIONAL_CHECKPOINTS_COUNT = 5 -%}
{% set ADDITIONAL_VALUES = [0, 1, 5, 10, 50, 100] -%}
insert into function s3(
  's3:///hammy/lagrangian/1/1/proc/statistical-significance.csv',
  'CSVWithNames'
) 
with src as (
  select *, if(target_position >= 0, 1, -1) sgn 
  from s3('s3:///hammy/lagrangian/1/1/raw/lagrangian_*.gzip.parquet', Parquet)),
cnts as (
  {%- set unionall1 = joiner(" union all ") %}
  {%- for i in range(1, MAIN_CHECKPOINTS_COUNT + 1) %}{{ unionall1() }}
  {%- set unionall2 = joiner(" union all ") %}
  {%- for j in range(0, ADDITIONAL_CHECKPOINTS_COUNT) %}{{ unionall2() }}
  select abs(target_position) target_position,
    {{ i * 1000 + ADDITIONAL_VALUES[j] }} checkpoint, 
    sgn * checkpoint{{ i }}{{ j }}_position position, count(*) cnt,
    position = round(target_position / 6000 * checkpoint) as is_correct,
    row_number() over (partition by target_position, checkpoint order by cnt desc) rn
  from src group by target_position, position
  {%- endfor %}
  {%- endfor %}),
jin as (
  select target_position, checkpoint, 
    x.position position1, x.cnt cnt1, x.is_correct is_correct1, 
    (cnt1 - cnt2) / sqrt(cnt1 + cnt2) > 1.64 as is_significant,
    y.position position2, y.cnt cnt2, y.is_correct is_correct2 
  from cnts x 
  left join (select * from cnts where rn = 2) y using (target_position, checkpoint)
  where rn = 1 settings join_use_nulls=1)
select * from jin