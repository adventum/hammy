{%set N = 1 -%}
{%set M = 100 -%}
{%set datasource = "`hammy`.`/lagrangian/1/1" -%}
$sorted = (select checkpoint10_position,
  {%- set comma = joiner(",") %}
  {%- for i in range(1, N + 1) %}{{ comma() }}
  row_number() over(order by Random(epoch)) sorted{{ i }}
  {%- endfor %}
  from {{ datasource }}/raw/*.gzip.parquet`
  with
   (
      format=parquet, 
      schema=(
         epoch Int32, target_position Int32, checkpoint10_position Int32, checkpoint11_position Int32, checkpoint12_position Int32, checkpoint13_position Int32, checkpoint14_position Int32, checkpoint15_position Int32, checkpoint20_position Int32, checkpoint21_position Int32, checkpoint22_position Int32, checkpoint23_position Int32, checkpoint24_position Int32, checkpoint25_position Int32, checkpoint30_position Int32, checkpoint31_position Int32, checkpoint32_position Int32, checkpoint33_position Int32, checkpoint34_position Int32, checkpoint35_position Int32, checkpoint40_position Int32, checkpoint41_position Int32, checkpoint42_position Int32, checkpoint43_position Int32, checkpoint44_position Int32, checkpoint45_position Int32, checkpoint50_position Int32, checkpoint51_position Int32, checkpoint52_position Int32, checkpoint53_position Int32, checkpoint54_position Int32, checkpoint55_position Int32
      )
   )
  where target_position = 60
  );

$counts = (select x.*,
  {%- set comma = joiner(",") %}
  {%- for i in range(1, N + 1) %}{{ comma() }}
  countIf(checkpoint10_position = 10) over(order by sorted1) position{{ i }}_exact, 
  countIf(checkpoint10_position = 8) over(order by sorted1) position{{ i }}_left,
  countIf(checkpoint10_position = 12) over(order by sorted1) position{{ i }}_right
  {%- endfor %}
  from $sorted x);
$is_top_exact = (select
  {%- set comma = joiner(",") %}
  {%- for i in range(1, N + 1) %}{{ comma() }}
  sorted{{ i }},
  cast(position{{ i }}_exact > position{{ i }}_left and position{{ i }}_exact > position{{ i }}_right AS Int32) correct{{ i }}
  {%- endfor %}
  from $counts);
$fix_changes = (select
  {%- set comma = joiner(",") %}
  {%- for i in range(1, N + 1) %}{{ comma() }}
  sorted{{ i }},
  correct{{ i }} - coalesce(lag(correct{{ i }}), 0) over (order by sorted{{ i }}) change{{ i }}
  {%- endfor %}
  from $is_top_exact);
$leave_changes = (select *
  from $fix_changes
  where {%- set orr = joiner(" or ") %}
    {% for i in range(1, N + 1) %}{{ orr() }}change{{ i }} !=0 {% endfor %});
$union_changes = (
  {%- set union_all = joiner(" union all ") %}
  {%- for i in range(1, N + 1) %}{{ union_all() }}select sorted{{ i }} sorted, change{{ i }} change
    from $leave_changes where change{{ i }} != 0
  {%- endfor %});
$accumulate_changes = (select sorted, 
  cast(sum(change) over (order by sorted) as Float) / {{ N }} as exactness_ratio 
  from $union_changes);
{%- for i in range(M) %}
insert into {{ datasource }}/proc/exactness-curve/{{ i}}/` 
  with (format='csv_with_names')
  select {{ i }} as m, x.* from $accumulate_changes as x order by sorted;
{%- endfor %}